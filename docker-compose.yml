services:
  postgresql:
    container_name: postgresql
    image: postgres:14
    profiles: ['db-only', 'db-and-minio-s3', 'local-run']
    environment:
      POSTGRES_DB: pelican_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
    ports:
      - 6432:5432
    networks:
      - pelican-cms-network

  minio:
    container_name: minio
    image: minio/minio
    profiles: ['minio-s3-only', 'db-and-minio-s3', 'local-run']
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - pelican-cms-network
    volumes:
      - minio_storage:/data
    environment:
      MINIO_ROOT_USER: admin 
      MINIO_ROOT_PASSWORD: rootPassword
    command: server --console-address ":9001" /data

  minio-setup:
    image: minio/mc:latest
    container_name: minio-setup
    depends_on:
      - minio
    profiles: ['minio-s3-only', 'db-and-minio-s3', 'local-run']
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: rootPassword
      BUCKET_NAME: pelican-bucket
    networks:
      - pelican-cms-network
    entrypoint: >
      /bin/sh -c "
      until mc alias set myminio http://minio:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD; do
        echo 'Waiting for MinIO to be ready...'
        sleep 5
      done &&
      mc mb myminio/$$BUCKET_NAME &&
      mc anonymous set public myminio/$$BUCKET_NAME
      "

  pelican-cms:
    container_name: pelican-cms
    build:
      dockerfile: Dockerfile
      context: .
    profiles: ['local-run']
    environment:
      SERVER_URL: http://localhost:1337
      DATABASE_PORT: 5432
      DATABASE_HOST: postgresql
      AWS_ACCESS_KEY_ID: admin
      AWS_ACCESS_SECRET_KEY: rootPassword
      AWS_ENDPOINT: http://minio:9000
      AWS_REGION: us-east-1
      AWS_BUCKET: pelican-bucket
    ports:
      - 1337:1337
    networks:
      - pelican-cms-network

networks:
  pelican-cms-network:

volumes:
  minio_storage: {}
