name: Run tests

on: 
  push:
    branches:
      - feature/*

jobs:
  # push_to_registry:
  #   name: Push Docker image to GitHub Container Registry
  #   runs-on: ubuntu-22.04
  #   permissions:
  #     packages: write
  #     contents: read

  #   steps:
  #     - name: Check out the repo
  #       uses: actions/checkout@v4

  #     - name: Log in to GitHub Container Registry
  #       uses: docker/login-action@v2
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Determine Docker tag
  #       id: determine_tag
  #       run: |
  #           BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed -E 's/[^a-zA-Z0-9.-]+/-/g' | sed -E 's/^-//g')
  #           echo "Using tag: $BRANCH_NAME"
  #           echo "TAG=$BRANCH_NAME" >> $GITHUB_ENV

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         file: ./Dockerfile
  #         push: true
  #         tags: ghcr.io/tourmalinecore/pelican-cms:${{ env.TAG }}
  #         build-args: |
  #           SERVER_URL=http://localhost:40110/cms

  e2e-tests:
    runs-on: ubuntu-24.04
    # needs: push_to_registry

    strategy:
      fail-fast: false
      matrix:
        node-version: [20.18.0]

    steps:
      - name: Checkout local-env
        uses: actions/checkout@v4
        with:
          repository: TourmalineCore/pelican-local-env

      - name: Deploy Local Env to Kind k8s
        uses: devcontainers/ci@v0.3
        with:
          runCmd: |
            kind create cluster --name pelican --config kind-local-config.yaml --kubeconfig ./.pelican-cluster-kubeconfig
            export KUBECONFIG=$(pwd)/.pelican-cluster-kubeconfig
            export IMAGE_TAG="feature-158-local-env-config"
            helmfile --environment local --namespace local -f deploy/helmfile.yaml apply -f ./ci/values-custom.yaml
          push: never

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache node modules
        id: cache-nodemodules
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
  
      # let's cache the binaries of installed browsers that we don't re-install them every time from scratch
      - name: Cache playwright browsers
        id: cache-playwrightbrowsers
        uses: actions/cache@v4
        env:
          cache-name: cache-playwright-browsers
        with:
          # caching browsers binaries
          # this path is taken from here https://playwright.dev/docs/browsers#managing-browser-binaries
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Install Playwright Browsers
        if: steps.cache-playwrightbrowsers.outputs.cache-hit != 'true'
        run: npx playwright install chromium --with-deps

      - name: Playwright run
        run: npx playwright test --reporter=html
    
        env:
          FRONTEND_URL: http://localhost:40110 
          SERVER_URL: 'http://localhost:40110/cms'

      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: html-report--attempt-${{ github.run_attempt }}
          path: playwright-report
          retention-days: 7